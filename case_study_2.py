# -*- coding: utf-8 -*-
"""case_study-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18pS9G3zmDEYElmQf0TbrXPKKSCyguNeH

Customer order Analysis
"""

#importing required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

customer_order = pd.read_csv("/content/casestudy.csv")
customer_order.drop(columns=['Unnamed: 0'], inplace=True)
customer_order.head()

"""# 1. Total revenue for current year"""

# grouping the dataframe by year
revenue_per_year = customer_order.groupby(['year']).sum()

# resetting the index
revenue_per_year.reset_index(inplace=True)

# removing the redundant column and renaming the required columns
revenue_per_year = revenue_per_year.rename(columns = {'year':'current_year'})[['current_year','net_revenue']]
print(revenue_per_year)

"""#2. New Customer Revenue

Here we will use one hot encoding for the column 'year'. The column year as 3 values, so 3 columns will be generated.

Customers newly added in 2016 will a value of 1 in column __"2016"__ and a value of 0 in column __"2015"__. We can filter these entries to get our output

Here we will not consider the year 2015 as it not does have any previous year to evaluate adding of new customers.

## a. New Customers revenue in 2016
"""

customer_order_onehotcoded = pd.concat([customer_order, pd.get_dummies(customer_order['year'])],axis=1)
# new customers added in 2016
new_customers_2016 = customer_order_onehotcoded.loc[
                               (customer_order_onehotcoded[2015]==0)
                              &(customer_order_onehotcoded[2016]==1)]
new_customers_2016 = new_customers_2016.drop_duplicates(subset=['customer_email'])

new_customers_2016_revenue = new_customers_2016[['customer_email','net_revenue']]
print(new_customers_2016_revenue)

"""## b. New Customers added in 2017"""

# new customers added in 2017
new_customers_2017 = customer_order_onehotcoded.loc[
                               (customer_order_onehotcoded[2016]==0)
                              &(customer_order_onehotcoded[2017]==1)]
new_customers_2017 = new_customers_2016.drop_duplicates(subset=['customer_email'])


new_customers_2017_revenue = new_customers_2017[['customer_email','net_revenue']]
print(new_customers_2017_revenue)

"""#3. Existing customer Growth

We will consider the entries of cunstomers which appear in 2 consecutive years to identify existing customers accross 2 years

Then we will join the dataframe from 2 consecutive years on the customer email ids. The growth of each existing customer will be evaluated by subtracting the net_revenue of customer in the previous year from the net_revenue of customer in the current year

Here we will not consider the column 2015 as it does not have any previous year to compare for growth


## a. Existing customer growth from 2015 to 2016 (for 2016)
"""

# filtering existing customers from 2015
prev_year = customer_order[customer_order['year'] == 2015]

# filtering existing customers from 2016
current_year = customer_order[customer_order['year'] == 2016]

#merging the existing cutomers on the customer email
existing_cutomers_growth_2016 = prev_year.merge(current_year, how='inner', on = 'customer_email')
existing_cutomers_growth_2016.columns = ['customer_email','net_revenue_2015','2015','net_revenue_2016','2016']
existing_cutomers_growth_2016['growth'] = existing_cutomers_growth_2016['net_revenue_2016'] - existing_cutomers_growth_2016['net_revenue_2015']

print(existing_cutomers_growth_2016)

"""## b. Existing customer growth from 2016 to 2017 (for 2017)"""

# filtering existing customers from 2016
prev_year = customer_order[customer_order['year'] == 2016]

# filtering existing customers from 2017
current_year = customer_order[customer_order['year'] == 2017]

#merging the existing cutomers on the customer email
existing_cutomers_growth_2017 = prev_year.merge(current_year, how='inner', on = 'customer_email')
existing_cutomers_growth_2017.columns = ['customer_email','net_revenue_2016','2016','net_revenue_2017','2017']
existing_cutomers_growth_2017['growth'] = existing_cutomers_growth_2017['net_revenue_2017'] - existing_cutomers_growth_2017['net_revenue_2016']

print(existing_cutomers_growth_2017)

"""# 4. Revenue lost from Attrition
We will consider the dataframe generated from the previous question __"existing_cutomers_growth_2015"__ and __"existing_cutomers_growth_2016"__.

For getting the revenue lost will sum of the negative growth values for each year.

We will not consider the year 2015 as it does not have previous to compare the reduction in the revenue

## a. Revenue lost in 2016
"""

# revenue lost in 2016
lost_revenue_2016 = existing_cutomers_growth_2016[existing_cutomers_growth_2016['growth']<0]
print("Revenue lost in 2016 due to attrition :", round(abs(sum(lost_revenue_2016['growth'])),2))

"""## b. Revenue lost in 2017"""

# revenue lost in 2017
lost_revenue_2017 = existing_cutomers_growth_2017[existing_cutomers_growth_2017['growth']<0]
print("Revenue lost in 2017 due to attrition :", round(abs(sum(lost_revenue_2017['growth'])),2))

"""#5. Existing Customer Revenue Current Year 

We will use the __"existing_customer_growth"__ dataframe to identify revenue of existing customers in current year

Here we will not consider the column 2015 as it does hot have any previous year to compare with.

## a. Existing customer revenue for 2016
"""

existing_cutomers_revenue_2016 = existing_cutomers_growth_2016[['customer_email','net_revenue_2016']]
print(existing_cutomers_revenue_2016)

"""##b. Existing customer revenue for 2017"""

existing_cutomers_revenue_2017 = existing_cutomers_growth_2017[['customer_email','net_revenue_2017']]
print(existing_cutomers_revenue_2017)

"""#6. Existing Customer Revenue Pior Year

We will use the __"existing_customer_growth"__ dataframe to identify revenue of existing customers in current year

Here we will not consider the column 2015 as it does hot have any previous year to compare with.

## a. Existing customer revenue for year prior to 2016
"""

existing_cutomers_revenue_2016_prior = existing_cutomers_growth_2016[['customer_email','net_revenue_2015']]
print(existing_cutomers_revenue_2016_prior)

"""## a. Existing customer revenue for year prior to 2017"""

existing_cutomers_revenue_2017_prior = existing_cutomers_growth_2017[['customer_email','net_revenue_2016']]
print(existing_cutomers_revenue_2017_prior)

"""#7. Total Customers current year

## a. Total Customers in 2015
"""

customers_2015 = customer_order[customer_order['year']==2015]
print("Total number of customers in 2015: ", customers_2015['customer_email'].nunique())

"""## b. Total Customers in 2016"""

customers_2016 = customer_order[customer_order['year']==2016]
print("Total number of customers in 2016: ", customers_2016['customer_email'].nunique())

"""## c. Total Customers in 2017"""

customers_2017 = customer_order[customer_order['year']==2017]
print("Total number of customers in 2017: ", customers_2017['customer_email'].nunique())

"""#8. Total Customers previous year

For the year 2015 there is not previous year to compare hence we will only consider this case for years 2016 and 2017

## a. Total customers in the year prior to 2016
"""

customers_2016_prior = customer_order[customer_order['year']==2015]
print("Total number of customers in the year prior to 2016: ", customers_2015['customer_email'].nunique())

"""## b. Total customers in the year prior to 2015"""

customers_2017_prior = customer_order[customer_order['year']==2016]
print("Total number of customers in the year prior to 2017: ", customers_2016['customer_email'].nunique())

"""#9. New Customers

For the year 2015 there is not previous year to compare hence we will only consider this case for years 2016 and 2017

## a. Customers added in 2016
We will take the dataframe created in 2a
"""

print(new_customers_2016)

"""##b. Customers added in 2017

We will take the dataframe created in 2b
"""

print(new_customers_2017)

"""# 10. Lost Customers

For the year 2015 there is not previous year to compare hence we will only consider this case for years 2016 and 2017

## a. Customers lost in 2016 (with respect to 2015)
"""

customers_lost_2016 = customer_order_onehotcoded.loc[
                               (customer_order_onehotcoded[2015]==1)
                              &(customer_order_onehotcoded[2016]==0)]
print(customers_lost_2016)

"""## a. Customers lost in 2017 (with respect to 2016)"""

customers_lost_2017 = customer_order_onehotcoded.loc[
                               (customer_order_onehotcoded[2016]==1)
                              &(customer_order_onehotcoded[2017]==0)]
print(customers_lost_2017)

"""#11. Visualization"""

customer_order.head()

"""Plotting the net revenue for each year."""

# using the dataframe from case 1
revenue_per_year
plt.figure(figsize=(15,8))
plt.bar(x=revenue_per_year['current_year'],height=revenue_per_year['net_revenue'], width =0.5)
plt.xlabel("Year", fontsize=18)
plt.xticks([2015,2016,2017], rotation=45, fontsize=18)
plt.ylabel("Net Revenue", fontsize=18)
plt.title("Net Revenue for current year", fontsize=18)

"""From the plot we can conclude that the revenue drops from 2015 to 2016 and increases from 2016 to 2017. This proves the larger revenue fall of __"2456027.9"__ from 2015 to 2016 as compared to the revenue fall of __"855291.6"__ from 2016 to 2017. Referenced from point 4a and 4b above.


Similar trend is observed for the customer count as well
"""

# grouping the dataframe by year
customer_per_year = customer_order.groupby(['year']).count()

# resetting the index
customer_per_year.reset_index(inplace=True)


customer_per_year = customer_per_year[['year','customer_email']]
customer_per_year

plt.figure(figsize=(15,8))
plt.bar(x=customer_per_year['year'],height=customer_per_year['customer_email'], width =0.5, color='orange')
plt.xlabel("Year", fontsize=18)
plt.xticks([2015,2016,2017], rotation=45, fontsize=18)
plt.ylabel("Net Revenue", fontsize=18)
plt.title("Customer count for current year", fontsize=18)